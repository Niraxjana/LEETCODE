                                                                  2558. Take Gifts From the Richest Pile

Problem Description: Given an integer array gifts denoting the number of gifts in various piles
#Choose the pile with the max no. of gifts.
#If there is more than one pile with the max no. of gifts, choose any.
#Leave behind the floor of the square root of the number of gifts in the pile. Take the rest of the gifts.

Example 1:

Input: gifts = [25,64,9,4,100], k = 4
             = [5,8,9,4,3] 
       sum(gifts)=29     
Output: 29

APPROACH:
1.Sort the gifts: Initially, sort the list to easily access the largest gift using min heap
2.Iterate for (k) operations: Replace the largest value with its integer square root and then re-sort the list to maintain access to the new largest value.
3.Sum the remaining values: After completing the (k) operations, calculate the sum of the modified array.

PROGRAM:
import heapq
import math

def pickGifts(gifts, k):
    # Using a min-heap with negative values to simulate a max-heap
    max_heap = [-gift for gift in gifts]
    print("Initial max heap:", max_heap)
    heapq.heapify(max_heap)
    print(max_heap)
    
    for _ in range(k):#perform a task k times but don't need the loop variable itself. Variable will not be used inside the loop.
        # Get the largest gift count (convert negative back to positive)
        curr = -heapq.heappop(max_heap)
        print(curr)
        # Push the square root of the current count (back as negative)
        heapq.heappush(max_heap, -int(math.sqrt(curr)))
        print("Heap after iteration:", max_heap)
    
    # Sum the remaining values in the heap (convert back to positive)
    return -sum(max_heap)

# Test the function
result = pickGifts([25, 64, 9, 4, 100], 4)
print("Result:", result)


ACTUAL:
class Solution:
    def pickGifts(self, gifts: List[int], k: int) -> int:
        data = [-data for data in gifts]
        heapify(data)
        for _ in range (k):
            curr = -heapq.heappop(data)
            heapq.heappush(data, -int(math.sqrt(curr)))
        return -sum(data)

        


TIME COMPLEXITY: build heap - O(n)
remove element / push element in heap for k no. of times - O(logn)
TOTAL tc = O(n+klogn)
